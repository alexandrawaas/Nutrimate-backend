openapi: 3.0.0
info:
  title: Nutrimate API documentation
  version: 1.0.0
tags:
  - name: food
    description: Endpoints for foods
  - name: recipes
    description: Endpoint for recipe search
  - name: allergens
    description: Endpoints for allergens
  - name: environmentalScore
    description: Endpoint for environmental score
  - name: user
    description: Endpoints for user and auth

paths:
  /fridge/food:
    get:
      tags:
        - food
      summary: Get a list of all the user's food in the fridge
      operationId: getFood
      parameters:
          - in: query
            name: page
            schema:
                type: integer
                example: 1
            description: The page number
          - in: query
            name: size
            schema:
                type: integer
                example: 10
            description: The number of items per page
          - in: query
            name: q
            schema:
                type: string
                example: bread
            description: Search for a specific food
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _embedded:
                    type: object
                    properties:
                      foodDTOResponseList:
                        type: array
                        items:
                          $ref: '#/components/schemas/FoodDTOResponse'
                  _links:
                    properties:
                      first:
                        type: object
                        properties:
                          href:
                            type: string
                            example: http://localhost:8080/fridge/food?page=0&size=10
                      prev:
                        type: object
                        properties:
                          href:
                            type: string
                            example: http://localhost:8080/fridge/food?page=0&size=10
                      self:
                        type: object
                        properties:
                          href:
                            type: string
                            example: http://localhost:8080/fridge/food?page=1&size=10
                      next:
                        type: object
                        properties:
                          href:
                            type: string
                            example: http://localhost:8080/fridge/food?page=2&size=10
                      last:
                        type: object
                        properties:
                          href:
                            type: string
                            example: http://localhost:8080/fridge/food?page=2&size=10
                  page:
                    type: object
                    properties:
                      size:
                        type: integer
                        example: 10
                      totalElements:
                        type: integer
                        example: 30
                      totalPages:
                        type: integer
                        example: 3
                      number:
                        type: integer
                        example: 1
        '401':
          description: User not authenticated
        '204':
          description: No food inside the fridge
    post:
      tags:
        - food
      summary: Add a new food to the user's fridge
      operationId: addFood
      requestBody:
        description: Create a new food instance in the fridge
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodDTORequest'
        required: true
      responses:
        '201':
          description: Food saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodDTOResponse'
        '400':
          description: Invalid input
        '401':
          description: User not authenticated


  /fridge/food/{foodId}:
    get:
      tags:
        - food
      summary: Find food by ID
      description: Returns a single food by ID
      operationId: getFoodById
      parameters:
        - name: foodId
          in: path
          description: ID of food to return
          required: true
          schema:
            type: integer
            format: long
        - name: If-None-Match
          in: header
          description: ETag of the resource
          required: false
          schema:
            type: string
            example: 10--123456789
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodDTOResponse'
        '401':
          description: User not authenticated
        '403':
          description: Not changed since last request (E-Tag matches)
        '404':
          description: Food not found
    patch:
      tags:
        - food
      summary: Open a food and add days in which it should be consumed
      operationId: openFood
      parameters:
        - name: foodId
          in: path
          description: ID of food to open
          required: true
          schema:
            type: integer
            format: long
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DaysToConsumeDTORequest'
      responses:
        '200':
          description: Food successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodDTOResponse'
        '401':
          description: User not authenticated
        '400':
          description: Invalid input
        '404':
          description: Food not found
    delete:
      tags:
        - food
      summary: Deletes a food
      description: delete a food from the user's fridge
      operationId: deleteFood
      parameters:
        - name: foodId
          in: path
          description: ID of food to delete
          required: true
          schema:
            type: integer
            format: long
      responses:
        '200':
          description: Food successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodDTOResponse'
        '401':
          description: User not authenticated
        '404':
          description: Food not found

  /food/{barcode}:
    get:
      tags:
        - food
      summary: Find food by barcode
      description: Returns a single food by barcode
      operationId: getFoodByBarcode
      parameters:
        - name: barcode
          in: path
          description: barcode of food to return
          required: true
          schema:
            type: string
        - name: If-None-Match
          in: header
          description: ETag of the resource
          required: false
          schema:
            type: string
            example: 123456789--123456789
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodScanDTOResponse'
        '403':
          description: Not changed since last request (E-Tag matches)
        '404':
          description: Food not found in the open food facts database


  /food/{barcode}/matching-allergens:
    get:
      tags:
        - food
      summary: Get allergens of a food that match the user's allergens
      description: Get a list of allergens of the food that match the user's allergens
      operationId: getMatchingAllergens
      parameters:
        - name: barcode
          in: path
          description: barcode of food to return allergens of
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllergenDTOResponse'
        '401':
          description: User not authenticated
        '404':
          description: Food not found

  /food/{barcode}/environmental-score:
    get:
      tags:
        - food
      summary: Get environmental score of a food
      description: Get an integer describing the environmental score of a single food
      parameters:
        - name: barcode
          in: path
          description: ID of food to show environmental score of
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalScoreDTOResponse'
        '404':
          description: Food not found

  /recipes:
    get:
      tags:
        - recipes
      summary: Returns a filtered list of recipes
      description: Returns a list of recipes containing the foods and not containing the allergens
      operationId: searchRecipes
      parameters:
        - in: query
          name: categories
          schema:
            type: array
            items:
              type: string
          description: The names of the food categories (1 per food) that the recipe should contain
        - in: query
          name: allergens
          schema:
            type: array
            items:
              type: integer
          description: The names of the allergens that should not be in the recipes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeDTOResponse'
        '204':
          description: No recipes found

  /fridge/environmental-score:
    get:
      tags:
        - environmentalScore
      summary: Get environmental score of fridge
      description: Get an integer describing the environmental score of all the food in the fridge
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalScoreDTOResponse'
        '401':
          description: User not authenticated
        '204':
          description: No food in the fridge

  /allergens:
    get:
      tags:
        - allergens
      summary: Get all allergens
      description: Get a list of all allergens
      operationId: getAllergens
      responses:
        '200':
          description: successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                example: max-age=86400
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllergenDTOResponse'

  /user/allergens:
    get:
      tags:
        - user
      summary: Get all allergens the user has saved in their profile
      description: Get a list of all the user's allergens
      operationId: getAllergensOfUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllergenDTOResponse'
        '204':
          description: No content
        '401':
          description: User not authenticated
    put:
      tags:
        - user
      summary: Change the list of allergens in a user's profile
      operationId: editAllergens
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AllergenDTORequest'
        required: true
      responses:
        '201':
          description: Allergens saved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllergenDTOResponse'

        '400':
          description: Invalid input
        '204':
          description: User has no allergenes
        '401':
          description: User not authenticated

  /user/favourite-recipes:
    get:
      tags:
        - user
      summary: Get all recipes the user has saved in their favourites
      description: Get a list of all the user's favourite recipes
      operationId: getRecipesOfUser
      parameters:
        - in: query
          name: q
          schema:
              type: string
              example: spaghetti
          description: Search for a specific recipe
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavouriteRecipeDTOResponse'
        '204':
          description: No content
        '401':
          description: User not authenticated
    post:
      tags:
        - user
      summary: Add one favourite recipe to the list of favourite recipes in a user's profile
      operationId: addFavouriteRecipes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeDTORequest'
        required: true
      responses:
        '201':
          description: Recipe saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouriteRecipeDTOResponse'

        '400':
          description: Invalid input
        '401':
          description: User not authenticated

  /user/favourite-recipes/{recipeId}:
    delete:
      tags:
        - user
      summary: Removes a recipe from the user's favourites
      description: remove a recipe
      operationId: deleteRecipe
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe to remove
          required: true
          schema:
            type: integer
            format: long
      responses:
        '200':
          description: Recipe successfully removed
          content:
              application/json:
                schema:
                    $ref: '#/components/schemas/FavouriteRecipeDTOResponse'
        '401':
          description: User not authenticated
        '404':
          description: Recipe not found

  /register:
    post:
      tags:
        - user
      summary: Register a new user
      description: Creates a new user account
      operationId: registerUser
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTOResponse'
        '400':
          description: Invalid input

  /user:
    delete:
      tags:
        - user
      summary: Delete a user
      description: Deletes a user account
      operationId: deleteUser
      responses:
        '204':
          description: User successfully deleted
        '401':
          description: User not authenticated
        '404':
          description: User not found


components:
  schemas:

    EnvironmentalScoreDTOResponse:
      type: object
      properties:
        environmentalScore:
          type: integer
          example: 50

    FoodDTOResponse:
      type: object
      properties:
        id:
          type: integer
          format: long
          example: 10
        barcode:
          type: string
          example: 3045140105502
        expireDate:
          type: string
          format: date
          example: 2024-09-20
        category:
          type: string
          example: flour
        name:
          type: string
          example: Alnatura Dinkelmehl 630
        isOpen:
          type: boolean
          example: true
        timeOpened:
          type: string
          format: date
          example: 2024-09-01
        daysToConsume:
          type: integer
          example: null
        calories:
          type: number
          example: 100.57
        fats:
          type: number
          example: 10.14
        saturatedFats:
          type: number
          example: 5.65
        carbs:
          type: number
          example: 20.76
        sugar:
          type: number
          example: 5.22
        fibers:
          type: number
          example: 5.41
        proteins:
          type: number
          example: 5.43
        salt:
          type: number
          example: 0.01
        allergens:
          type: array
          items:
            $ref: '#/components/schemas/AllergenDTOResponse'
        imageUrl:
          type: string
          example: https://www.alnatura.de/flour.jpg
        _links:
          type: object
          properties:
              self:
                type: object
                properties:
                  href:
                    type: string
                    example: http://localhost:8080/fridge/food/10

    FoodDTORequest:
      type: object
      properties:
        amount:
          type: integer
          example: 2
        barcode:
          type: string
          example: 3045140105502
        expireDate:
          type: string
          format: date
          example: 2024-09-20

    FoodScanDTOResponse:
      type: object
      properties:
        name:
          type: string
          example: Alnatura Dinkelmehl 630
        barcode:
          type: string
          example: 3045140105502
        calories:
          type: number
          example: 100.57
        fat:
          type: number
          example: 10.14
        saturated fats:
          type: number
          example: 5.65
        carbs:
          type: number
          example: 20.76
        sugar:
          type: number
          example: 5.22
        fibers:
          type: number
          example: 5.41
        proteins:
          type: number
          example: 5.43
        salt:
          type: number
          example: 0.01
        allergens:
          type: array
          items:
            $ref: '#/components/schemas/AllergenDTOResponse'
        category:
          type: string
          example: flour
        imageUrl:
          type: string
          example: https://www.alnatura.de/flour.jpg
        ecoscoreGrade:
          type: string
          example: A
        ecoscoreScore:
          type: integer
          example: 80
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/food/3045140105502

    DaysToConsumeDTORequest:
      type: object
      properties:
        daysToConsume:
          type: integer
          example: 5
        timeOpened:
          type: string
          format: date
          example: 2024-09-01

    FavouriteRecipeDTOResponse:
      type: object
      properties:
        id:
          type: integer
          format: long
          example: 3
        url:
          type: string
          example: https://edamam.com/recipe/123
        name:
          type: string
          example: Spaghetti Carbonara

    RecipeDTOResponse:
      type: object
      properties:
        url:
          type: string
          example: https://edamam.com/recipe/123
        name:
          type: string
          example: Spaghetti Carbonara

    RecipeDTORequest:
      type: object
      properties:
        url:
          type: string
          example: https://edamam.com/recipe/123
        name:
          type: string
          example: Spaghetti Carbonara

    AllergenDTOResponse:
      type: object
      properties:
        id:
          type: integer
          format: long
          example: 12
        name:
          type: string
          example: gluten

    AllergenDTORequest:
      type: object
      properties:
        id:
          type: integer
          format: long
          example: 12
        name:
          type: string
          example: gluten

    UserDTOResponse:
      type: object
      properties:
        email:
          type: string
          example: test@example.com
